@model UserSearchVM
@(Html.Kendo().Grid<UserVM>()
                    .Name("grid")
                    .Columns(columns => {
                        columns.Bound(p => p.Name);
                        columns.Bound(p => p.Surname);
                        columns.Bound(p => p.Language);
                        columns.Bound(p => p.Email);
                        columns.Command(command => { command.Edit().Text(Localizer[LocalizationCaptions.Edit].Value); command.Destroy().Text(Localizer[LocalizationCaptions.Delete].Value); }).Width(250);
                    })
                   .Pageable(pager => pager.AlwaysVisible(true).PageSizes(new int[] { 5, 10, 20, 100 }))
                    .Sortable()
                    .Scrollable()
                    .Filterable()
                     .ToolBar(toolbar =>
                     {
                         toolbar.Create().Text(Localizer[LocalizationCaptions.AddNewRecord].Value);
                     })
                        .Editable(editable => editable.Mode(GridEditMode.PopUp).Window(w => w.Title(Localizer[LocalizationCaptions.User].Value)).TemplateName("UsersUpdateView").ConfirmDelete(Localizer[LocalizationCaptions.ConfirmDelete].Value).DisplayDeleteConfirmation(Localizer[LocalizationCaptions.ConfirmDelete].Value))
                         .HtmlAttributes(new { style = "height:430px;" })
                        .DataSource(dataSource => dataSource
                       .Ajax()
                        .Batch(true)
                        .PageSize(5)
                        .ServerOperation(true)
                         .Events(events => events.Error("error_handler").RequestEnd("onGridRequestEnd").Sync("sync_handler"))
                        .Model(model => {
                            model.Id(p => p.Id);
                            model.Field(p => p.UserRoles).Editable(false);
                        })
                        .Create("EditingUsers_Create", "Authority")
                        .Update("EditingUsers_Update", "Authority")
                        .Destroy("EditingUsers_Destroy", "Authority")
                        .Read(read => read.Action("Get_Users", "Authority", new { name = Model.NameSearch, surname = Model.SurnameSearch, userType = Model.UserTypeSearch, email = Model.EmailSearch }))
                     )
                )
